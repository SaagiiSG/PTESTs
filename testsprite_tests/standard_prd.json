{
  "meta": {
    "project": "Learning and Assessment Platform",
    "date": "2025-08-08",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "A full-stack learning and assessment platform featuring user authentication, course and test catalogs, payment integration with QPay, and a comprehensive admin dashboard. The platform supports bilingual UI, secure content embedding, purchase management, and robust analytics for user activity and revenue tracking.",
  "core_goals": [
    "Provide secure and flexible user authentication supporting email and phone credentials with session management.",
    "Offer an intuitive catalog of courses and tests with enriched content including lessons and embedded media.",
    "Enable seamless purchase flows with QPay integration, preventing duplicate purchases and synchronizing payment status reliably.",
    "Support administrators with a powerful dashboard for user, content, test, payment management, and analytics.",
    "Ensure secure handling and display of embedded test content with automatic embed code conversion and graceful error handling.",
    "Deliver a responsive, bilingual UI with theming and accessibility features.",
    "Maintain data consistency and integrity across user profiles, purchases, and payments.",
    "Facilitate easy deployment and configuration with environment variables and Vercel integration."
  ],
  "key_features": [
    "Authentication system with registration, login, logout, email verification, password reset, and NextAuth session handling.",
    "Public landing pages and catalog views for courses and tests with card listings and search.",
    "User profile management including editing, password changes, privacy settings, and history of purchases and tests.",
    "Course and lesson browsing with server APIs, supporting media embedding and responsive layouts.",
    "Admin portal featuring user management, course/test creation modals, analytics panels, and payment overview.",
    "Robust purchase and payment handling with QPay invoice creation, payment verification callbacks, duplicate purchase protection, and purchase synchronization.",
    "Embed code conversion system that standardizes various embed formats to responsive iframe embeds with encryption, decryption, and error fallback.",
    "Email and notification dispatch via SendGrid with templates for verification and notifications.",
    "Internationalization support for English and Mongolian languages, and theming with dark/light modes.",
    "API utilities with Axios, middleware for auth/routing, and MongoDB models for persistence."
  ],
  "user_flow_summary": [
    "User registration/login via email or phone, including credential validation, email verification, and session creation using NextAuth.",
    "Browsing courses and tests on public landing pages, viewing details and consuming lessons including embedded videos or quiz content.",
    "Users purchase courses or tests by creating invoices with QPay, scanning QR codes, and completion confirmed via payment callbacks updating purchase history.",
    "Users manage their profiles by updating personal information, changing passwords, and reviewing purchase and test histories.",
    "Administrators login to the admin portal secured by auth and admin guard, manage users, create/edit courses and tests using modals with real-time embed code analysis and conversion.",
    "Admin views analytics dashboards summarizing user engagement and payment data for operational insights.",
    "Embed codes entered by admins are automatically converted to secure iframes, encrypted before storage, decrypted upon request with graceful fallback on failure, and displayed consistently to users.",
    "Duplicate purchase protection prevents accidental repeat purchases through pre-checks, transaction-level constraints, and user feedback."
  ],
  "validation_criteria": [
    "Authentication flows must securely handle registration, login, email verification, and password reset with session management using NextAuth.",
    "Only authenticated users can access profile, purchase, and protected test routes; non-admins are redirected from admin pages.",
    "Admin dashboard pages and APIs must restrict access to users with admin privileges only.",
    "Course and test content display includes correctly decrypted and converted embed code without visible errors or broken layouts.",
    "Purchases are recorded atomically in both user model arrays and purchase collections, with no duplicate entries allowed.",
    "QPay integration correctly creates invoices, triggers callbacks that update payment status, and the client UI reflects accurate payment states.",
    "Embed code conversion supports all specified formats, with comprehensive logging and error handling; decryption failures fallback gracefully to original content without disruption.",
    "UI supports bilingual English/Mongolian context toggles and dark/light themes consistently across all pages.",
    "API endpoints provide clear, documented, and consistent responses with appropriate HTTP status codes for success and error conditions.",
    "Comprehensive testing scripts verify new test creation, embed code processing, purchase protection, and payment flows all pass without issues.",
    "Environment variables are correctly configured for local and production with secrets management and must be verified during deployment.",
    "DNS and domain configurations follow recommended TTL settings; MongoDB Atlas connection allows properly whitelisted Vercel IPs ensuring connection stability and security."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js (App Router)",
      "React",
      "NextAuth.js",
      "MongoDB",
      "Mongoose",
      "Tailwind CSS",
      "Axios"
    ],
    "features": [
      {
        "name": "Authentication",
        "description": "User registration, login, logout, email verification, reset password, and NextAuth session handling.",
        "files": [
          "app/api/auth/login/route.ts",
          "app/api/auth/logout/route.ts",
          "app/api/auth/register/route.ts",
          "app/api/auth/[...nextauth]/route.ts",
          "app/api/auth/request-email-verification/route.ts",
          "app/api/auth/verify-email/route.ts",
          "app/api/auth/request-password-reset/route.ts",
          "app/api/auth/reset-password/route.ts",
          "lib/auth.ts",
          "auth.ts"
        ]
      },
      {
        "name": "Home and Marketing Pages",
        "description": "Public landing and discovery pages for courses and tests with cards and listings.",
        "files": [
          "app/home/page.tsx",
          "app/page.tsx",
          "components/home/CourseCard.tsx",
          "components/home/TestCards.tsx",
          "components/footer.tsx",
          "components/navbar.tsx"
        ]
      },
      {
        "name": "User Profile",
        "description": "Profile details, edit profile, password change, privacy, and purchase/test histories.",
        "files": [
          "app/profile/page.tsx",
          "app/profile/layout.tsx",
          "app/profile/editprofile/page.tsx",
          "app/profile/changepassword/page.tsx",
          "app/profile/coursehistory/page.tsx",
          "app/profile/testhistory/page.tsx",
          "app/api/profile/me/route.ts",
          "app/api/profile/update/route.ts",
          "app/api/profile/purchase-history/route.ts"
        ]
      },
      {
        "name": "Courses and Lessons",
        "description": "Course listing, course details, and lesson consumption flow, with server APIs.",
        "files": [
          "app/Course/page.tsx",
          "app/Course/[courseId]/page.tsx",
          "app/Course/[courseId]/lesson/[lessonIdx]/page.tsx",
          "app/api/courses/route.ts",
          "app/api/courses/[courseId]/route.ts",
          "app/api/courses/[courseId]/lesson/[lessonIdx]/route.ts",
          "app/models/course.ts"
        ]
      },
      {
        "name": "Admin Dashboard",
        "description": "Admin area for managing users, tests, courses, analytics, and payments.",
        "files": [
          "app/admin/layout.tsx",
          "app/admin/page.tsx",
          "app/admin/users/page.tsx",
          "app/admin/tests/page.tsx",
          "app/admin/courses/page.tsx",
          "app/admin/analytics/page.tsx",
          "app/admin/payments/page.tsx",
          "components/AdminSidebarNav.tsx",
          "components/AdminPageWrapper.tsx"
        ]
      },
      {
        "name": "Admin Content Creation",
        "description": "Admin flows to create courses and tests with client forms and modals.",
        "files": [
          "app/admin/create-course/page.tsx",
          "app/admin/create-course/CreateCourseForm.tsx",
          "components/CreateCourseModal.tsx",
          "app/admin/create-test/page.tsx",
          "app/admin/create-test/CreateTestForm.tsx",
          "components/CreateTestModal.tsx"
        ]
      },
      {
        "name": "Payments and Invoices",
        "description": "Invoice creation, QPay integration, payment status checks, and purchase verification.",
        "files": [
          "app/api/create-invoice/route.ts",
          "app/api/course-payment/create-invoice/route.ts",
          "app/api/course-payment/check-payment/route.ts",
          "app/api/qpay/invoice/[invoiceId]/route.ts",
          "app/api/qpay/payment/list/route.ts",
          "app/api/qpay-course/invoice/[invoiceId]/route.ts",
          "app/api/verify-purchase/route.ts",
          "app/payment/qpay/page.tsx",
          "components/PaymentGateway.tsx",
          "components/QPayPayment.tsx",
          "lib/qpay.ts",
          "lib/qpay-service.ts",
          "lib/qpay-course.ts",
          "lib/payment-storage.ts",
          "lib/qr-storage.ts",
          "app/models/payment.ts",
          "app/models/purchase.ts"
        ]
      },
      {
        "name": "Public Purchase Flows",
        "description": "Public endpoints to create invoices and purchase free content without authentication.",
        "files": [
          "app/api/public/create-invoice/route.ts",
          "app/api/public/create-invoice-v2/route.ts",
          "app/api/public/payment/check/route.ts",
          "app/api/public/payment/course-check/route.ts",
          "app/api/public/payment/course-check-v2/route.ts",
          "app/api/public/purchase-free/route.ts"
        ]
      },
      {
        "name": "Tests and Embedding",
        "description": "Test content listing, embedding support, and protected access to tests.",
        "files": [
          "app/Tests/page.tsx",
          "app/Tests/layout.tsx",
          "app/api/tests/route.ts",
          "app/api/tests/[id]/route.ts",
          "app/api/protected-tests/route.ts",
          "app/api/protected-tests/[id]/route.ts",
          "app/api/protected-tests/[id]/embed/route.ts",
          "app/test-embed/[testId]/page.tsx",
          "components/TestsListWithSearch.tsx"
        ]
      },
      {
        "name": "Purchase Management",
        "description": "Create and check purchases, prevent duplicates, and sync payment with purchases.",
        "files": [
          "app/api/purchase/route.ts",
          "app/api/purchase/check/route.ts",
          "docs/DUPLICATE_PURCHASE_PROTECTION.md",
          "lib/purchaseUtils.js"
        ]
      },
      {
        "name": "Email and Notifications",
        "description": "Email dispatch for verification and notifications, plus related utility scripts.",
        "files": [
          "lib/sendEmail.ts",
          "app/api/test-email/route.ts",
          "scripts/detailedEmailTest.js",
          "scripts/checkSendGridStatus.js"
        ]
      },
      {
        "name": "API Utilities and Axios",
        "description": "Shared API client utilities and Axios configuration.",
        "files": [
          "lib/api.ts",
          "lib/axios.ts"
        ]
      },
      {
        "name": "UI Components and Theming",
        "description": "Shared UI primitives, theme provider, and toggles.",
        "files": [
          "components/ui/button.tsx",
          "components/ui/input.tsx",
          "components/ui/dialog.tsx",
          "components/ThemeProvider.tsx",
          "components/ThemeToggle.tsx",
          "components/LangToggle.tsx"
        ]
      },
      {
        "name": "Middleware and Config",
        "description": "Edge middleware for auth/routing and project-level configuration.",
        "files": [
          "middleware.ts",
          "next.config.ts",
          "vercel.json"
        ]
      },
      {
        "name": "Database and Models",
        "description": "MongoDB connection helpers and Mongoose models.",
        "files": [
          "lib/mongodb.ts",
          "lib/mongoose.ts",
          "app/models/course.ts",
          "app/models/payment.ts",
          "app/models/purchase.ts"
        ]
      },
      {
        "name": "Device and Utilities",
        "description": "Helper utilities including device detection, encryption, language, and general helpers.",
        "files": [
          "lib/device-detection.ts",
          "lib/encryption.ts",
          "lib/language.tsx",
          "lib/utils.ts"
        ]
      },
      {
        "name": "Debug and Diagnostics",
        "description": "Routes and scripts for debugging environment, sessions, and payment/QPay interactions.",
        "files": [
          "app/api/debug-env/route.ts",
          "app/api/debug-session/route.ts",
          "app/api/debug-qpay/route.ts",
          "app/api/debug-qpay-public/route.ts",
          "app/api/test-connection/route.ts",
          "scripts/debug-qpay-payment-check.js",
          "scripts/debugApiIssues.js"
        ]
      },
      {
        "name": "Public Assets and PWA",
        "description": "Static assets and manifest icons.",
        "files": [
          "public/manifest.json",
          "public/icon-192x192.png",
          "public/icon-512x512.png"
        ]
      }
    ]
  }
}
